import TelegramBot, { Message } from 'node-telegram-bot-api';
import { getUserData, setUserData } from './userData';
import { Bench } from '../exercises/Bench';
import { PullUp } from '../exercises/PullUp';
import { Dips } from '../exercises/Dips';
import { trainingMemory } from './photoHandler';
import { calculateWeights } from '../utils/calculateWeight';

const exerciseHandlers: Record<string, (bot: TelegramBot, msg: Message) => void> = {
  exercise_bench: Bench,
  exercise_pullups: PullUp,
  exercise_dips: Dips
};

export const messageHandler = async (bot: TelegramBot, msg: Message) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  if (!text) return;

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É 1–ü–ú –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  if (trainingMemory[chatId]?.schedule && !trainingMemory[chatId]?.maxWeight) {
    const maxWeight = parseFloat(text.replace(',', '.'));
    
    if (isNaN(maxWeight) || maxWeight <= 0) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–≤–∞—à 1–ü–ú –≤ –∫–≥).');
      return;
    }

    trainingMemory[chatId].maxWeight = maxWeight;
    const calculatedSchedule = calculateWeights(maxWeight, trainingMemory[chatId].schedule!);

    let responseText = `üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (1–ü–ú = ${maxWeight} –∫–≥):\n\n`;
    for (const [day, exercises] of Object.entries(calculatedSchedule)) {
      responseText += `*${day}:*\n`;
      exercises.forEach((ex, i) => {
        responseText += `${i + 1}. ${ex.weight} –∫–≥ x ${ex.reps}\n`;
      });
      responseText += '\n';
    }

    await bot.sendMessage(chatId, responseText, { parse_mode: 'Markdown' });
    delete trainingMemory[chatId]; // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const userData = getUserData(chatId);

  if (!userData.gender) {
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —á–µ—Ä–µ–∑ /start');
    return;
  }

  if (userData.age === undefined) {
    const age = parseInt(text, 10);
    if (!isNaN(age) && age > 0 && age < 120) {
      setUserData(chatId, { age });
      await bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥):');
    } else {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-119)');
    }
    return;
  }

  if (userData.weight === undefined) {
    const weight = parseFloat(text);
    if (!isNaN(weight) && weight >= 20 && weight <= 200) {
      setUserData(chatId, { weight });

      if (userData.exercise === 'exercise_bench') {
        await bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∂–∏–º –ª—ë–∂–∞ (–≤ –∫–≥):');
      } else if (userData.exercise === 'exercise_pullups') {
        await bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π:');
      } else if (userData.exercise === 'exercise_dips') {
        await bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –Ω–∞ –±—Ä—É—Å—å—è—Ö:');
      }
    } else {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (20-200 –∫–≥)');
    }
    return;
  }

  const handler = userData.exercise ? exerciseHandlers[userData.exercise] : null;
  if (handler) {
    handler(bot, msg);
    return;
  }

  await bot.sendMessage(chatId, '–í—ã —É–∂–µ –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –î–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
};