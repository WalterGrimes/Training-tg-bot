import TelegramBot, { Message } from "node-telegram-bot-api";
import { createWorker, PSM } from "tesseract.js";
import fs from "fs";
import axios from "axios";
import { preprocessImage } from "../utils/preprocessImage";
import { parseTrainingText } from "../utils/parseTrainingText";
import { TrainingMemory } from "../types/training";

export const trainingMemory: Record<number, TrainingMemory> = {};

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  for (const chatIdStr in trainingMemory) {
    const chatId = Number(chatIdStr);
    const data = trainingMemory[chatId];
    if (now - (data.timestamp || 0) > 30 * 60 * 1000) {
      delete trainingMemory[chatId];
      console.log(`–û—á–∏—â–µ–Ω —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è chatId: ${chatId}`);
    }
  }
}, 30 * 60 * 1000);

export const photoHandler = async (bot: TelegramBot, msg: Message) => {
    const chatId = msg.chat.id;

    if (!msg.photo || msg.photo.length === 0) {
        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
        return;
    }

    try {
        const fileId = msg.photo[msg.photo.length - 1].file_id;
        const fileUrl = await bot.getFileLink(fileId);

        const originalPath = `./photo_${chatId}.jpg`;
        const processedPath = `./photo_${chatId}_processed.jpg`;

        const response = await axios.get(fileUrl.toString(), { responseType: 'arraybuffer' });
        fs.writeFileSync(originalPath, response.data);

        await bot.sendChatAction(chatId, 'typing');
        await bot.sendMessage(chatId, 'üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');

        await preprocessImage(originalPath, processedPath);

        const worker = await createWorker('rus+eng');
        await worker.setParameters({
            tessedit_pageseg_mode: PSM.SINGLE_BLOCK,
            tessedit_char_whitelist: '0123456789,.—ÖxX*–î–¥–µ–Ω—å–ü–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–í—Ç–≤—Ç–æ—Ä–Ω–∏–∫–°—Å—Ä–µ–¥–∞–ß—á–µ—Ç–≤–µ—Ä–≥–ü–ø—è—Ç–Ω–∏—Ü–∞–°—Å—É–±–±–æ—Ç–∞–í–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        });

        const { data: { text } } = await worker.recognize(processedPath);
        await worker.terminate();

        fs.unlinkSync(originalPath);
        fs.unlinkSync(processedPath);

        const cleanedText = text
            .replace(/[–ûOo]/g, '0')
            .replace(/[lI|]/g, '1')
            .replace(/,/g, '.')
            .replace(/[—ÖxX*]/g, 'x')
            .replace(/\s+/g, ' ')
            .trim();

        if (!cleanedText) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç');
        }

        const schedule = parseTrainingText(cleanedText);
        
        if (!schedule) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
            return;
        }

        trainingMemory[chatId] = {
            text: cleanedText,
            schedule,
            timestamp: Date.now()
        };

        let responseText = 'üìã –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n';
        for (const [day, exercises] of Object.entries(schedule)) {
            responseText += `*${day}:*\n`;
            exercises.forEach((ex, i) => {
                responseText += `${i + 1}. ${ex.weight} x ${ex.reps}\n`;
            });
            responseText += '\n';
        }

        await bot.sendMessage(chatId, responseText, { parse_mode: 'Markdown' });
        await bot.sendMessage(chatId, 'üí™ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–¥–Ω–æ–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –º–∞–∫—Å–∏–º—É–º (1–ü–ú) –≤ –∫–≥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–±–æ—á–∏—Ö –≤–µ—Å–æ–≤:');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        delete trainingMemory[chatId];
    }
};