import TelegramBot, { Message } from 'node-telegram-bot-api';
import { trainingMemory } from './photoHandler'; // –ü—É—Ç—å –∫ —Ç–≤–æ–µ–º—É —Ñ–∞–π–ª—É —Å trainingMemory
import { calculateWeights } from '../utils/calculateWeight';

export const messageHandler = async (bot: TelegramBot, msg: Message) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();

  if (!text) return;

  // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –Ω–æ –µ—â—ë –Ω–µ—Ç maxWeight, –∑–Ω–∞—á–∏—Ç –∂–¥—ë–º 1–ü–ú
  if (trainingMemory[chatId]?.schedule && !trainingMemory[chatId]?.maxWeight) {
    const maxWeight = parseFloat(text.replace(',', '.'));

    if (isNaN(maxWeight) || maxWeight <= 0) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–≤–∞—à 1–ü–ú –≤ –∫–≥).');
      return;
    }

    trainingMemory[chatId].maxWeight = maxWeight;

    const calculatedSchedule = calculateWeights(maxWeight, trainingMemory[chatId].schedule!);

    let responseText = `üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —Ä–∞–±–æ—á–∏–º–∏ –≤–µ—Å–∞–º–∏ (1–ü–ú = ${maxWeight} –∫–≥):\n\n`;

    for (const [day, exercises] of Object.entries(calculatedSchedule)) {
      responseText += `*${day}:*\n`;
      exercises.forEach((ex, i) => {
        responseText += `${i + 1}. ${ex.weight} –∫–≥ x ${ex.reps}\n`;
      });
      responseText += '\n';
    }

    // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
    delete trainingMemory[chatId];

    await bot.sendMessage(chatId, responseText, { parse_mode: 'Markdown' });
    return;
  }

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã/—Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
};
